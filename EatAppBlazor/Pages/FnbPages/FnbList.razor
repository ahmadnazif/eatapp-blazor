@page "/fnb"

@using System.Diagnostics
@using Models
@using Services
@using Extensions
@using TempData

@inject IRestApiService api
@inject NavigationManager NavigationManager

<button class="btn btn-primary" @onclick="ListAll">Reload</button>
@if (Session.IsExist)
{
    <button class="btn btn-info" onclick="window.location.href='/fnb/add'">Add new</button>
}
<h1>Food &amp; Beverage</h1>

@if (fnbList.Count == 0)
{
    <p>Click on "Reload" button to fetch data</p>
    if (isRefreshing)
    {
        <p><i>@REFRESHING_DATA</i></p>
    }
}
else
{
    if (isRefreshing)
    {
        <p><i>@REFRESHING_DATA</i></p>
    }
    else
    {
        <p>Total FnB: @fnbList.Count | Reloaded at: @DateTime.Now.ToDbDateTimeString() | Takes @elapsed</p>

        <table id="table" class="table">
            <thead>
                <tr>
                    <td>Id</td>
                    <td>Fnb Name</td>
                    <td>Type</td>
                    <td>Created on</td>
                    <td>Option</td>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in fnbList)
                {
                    <tr>
                        <td>@item.Id</td>
                        <td>@item.Name</td>
                        <td>@item.FnbType</td>
                        <td>@item.CreatedTime.ToDbDateTimeString()</td>
                        <td><button class="btn btn-dark" @onclick="@(() => NavigateToFnbReview(item))">Review</button></td>
                    </tr>
                }
            </tbody>
        </table>
    }
}

@code {

    private const string REFRESHING_DATA = "Please wait. Refreshing data...";
    private TimeSpan elapsed;
    private bool isRefreshing = false;
    List<Fnb> fnbList = new List<Fnb>();


    protected override async Task OnInitializedAsync()
    {
        await ListAll();
    }

    async Task ListAll()
    {
        Stopwatch sw = Stopwatch.StartNew();
        isRefreshing = true;

        if (await api.IsAccessibleAsync())
        {
            fnbList = await api.ListAllFnbAsync();
            isRefreshing = false;
            sw.Stop();
            elapsed = sw.Elapsed;
        }
    }

    async Task NavigateToFnbReview(Fnb fnb)
    {
        //NavigationManager.NavigateTo($"fnb-review?id={id}");
        NavigationManager.NavigateTo($"fnb-review/{fnb.Id}/{fnb.Name}/{fnb.FnbType}/{fnb.CreatedTime.ToDbDateTimeString()}");
    }
}
